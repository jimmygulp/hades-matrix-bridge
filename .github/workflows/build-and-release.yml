name: Build, Package and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release with binaries'
        type: boolean
        default: false
      release_version:
        description: 'Version for the release (e.g., v1.0.0)'
        type: string
        required: false
env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'HadesMatrixBridge/HadesMatrixBridge.csproj'
  SOLUTION_PATH: 'HadesMatrixBridge.sln'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
    
    - name: Test
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal

  create-binaries:
    name: Create Binaries
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    # Build Linux x64 binary
    - name: Build Linux x64
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -o ./publish/linux-x64
    
    # Build Windows x64 binary
    - name: Build Windows x64
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -o ./publish/win-x64
    
    # Create zip archives
    - name: Create archives
      run: |
        cd ./publish/linux-x64
        zip -r ../../HadesMatrixBridge-linux-x64.zip .
        cd ../win-x64
        zip -r ../../HadesMatrixBridge-win-x64.zip .
        cd ../..
    
    # Upload artifacts
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: hades-matrix-bridge-linux-x64
        path: HadesMatrixBridge-linux-x64.zip
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: hades-matrix-bridge-win-x64
        path: HadesMatrixBridge-win-x64.zip
    
    # Create GitHub Release if this is a tag
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          HadesMatrixBridge-linux-x64.zip
          HadesMatrixBridge-win-x64.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-image:
    name: Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
